// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: Gateway/proto/owner.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Owner_Register_FullMethodName    = "/Owner/Register"
	Owner_RegisterPet_FullMethodName = "/Owner/RegisterPet"
	Owner_Delete_FullMethodName      = "/Owner/Delete"
	Owner_GetPets_FullMethodName     = "/Owner/GetPets"
)

// OwnerClient is the client API for Owner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OwnerClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RegisterPet(ctx context.Context, in *RegisterPetRequest, opts ...grpc.CallOption) (*RegisterPetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetPets(ctx context.Context, in *GetPetsRequest, opts ...grpc.CallOption) (*GetPetsResponse, error)
}

type ownerClient struct {
	cc grpc.ClientConnInterface
}

func NewOwnerClient(cc grpc.ClientConnInterface) OwnerClient {
	return &ownerClient{cc}
}

func (c *ownerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Owner_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerClient) RegisterPet(ctx context.Context, in *RegisterPetRequest, opts ...grpc.CallOption) (*RegisterPetResponse, error) {
	out := new(RegisterPetResponse)
	err := c.cc.Invoke(ctx, Owner_RegisterPet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Owner_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ownerClient) GetPets(ctx context.Context, in *GetPetsRequest, opts ...grpc.CallOption) (*GetPetsResponse, error) {
	out := new(GetPetsResponse)
	err := c.cc.Invoke(ctx, Owner_GetPets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OwnerServer is the server API for Owner service.
// All implementations must embed UnimplementedOwnerServer
// for forward compatibility
type OwnerServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	RegisterPet(context.Context, *RegisterPetRequest) (*RegisterPetResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	GetPets(context.Context, *GetPetsRequest) (*GetPetsResponse, error)
	mustEmbedUnimplementedOwnerServer()
}

// UnimplementedOwnerServer must be embedded to have forward compatible implementations.
type UnimplementedOwnerServer struct {
}

func (UnimplementedOwnerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedOwnerServer) RegisterPet(context.Context, *RegisterPetRequest) (*RegisterPetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPet not implemented")
}
func (UnimplementedOwnerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOwnerServer) GetPets(context.Context, *GetPetsRequest) (*GetPetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPets not implemented")
}
func (UnimplementedOwnerServer) mustEmbedUnimplementedOwnerServer() {}

// UnsafeOwnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OwnerServer will
// result in compilation errors.
type UnsafeOwnerServer interface {
	mustEmbedUnimplementedOwnerServer()
}

func RegisterOwnerServer(s grpc.ServiceRegistrar, srv OwnerServer) {
	s.RegisterService(&Owner_ServiceDesc, srv)
}

func _Owner_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Owner_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Owner_RegisterPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServer).RegisterPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Owner_RegisterPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServer).RegisterPet(ctx, req.(*RegisterPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Owner_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Owner_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Owner_GetPets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OwnerServer).GetPets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Owner_GetPets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OwnerServer).GetPets(ctx, req.(*GetPetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Owner_ServiceDesc is the grpc.ServiceDesc for Owner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Owner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Owner",
	HandlerType: (*OwnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Owner_Register_Handler,
		},
		{
			MethodName: "RegisterPet",
			Handler:    _Owner_RegisterPet_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Owner_Delete_Handler,
		},
		{
			MethodName: "GetPets",
			Handler:    _Owner_GetPets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Gateway/proto/owner.proto",
}
