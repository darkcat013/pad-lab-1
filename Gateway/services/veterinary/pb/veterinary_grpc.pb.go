// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: Gateway/proto/veterinary.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Veterinary_MakeAppointment_FullMethodName = "/Veterinary/MakeAppointment"
	Veterinary_EndAppointment_FullMethodName  = "/Veterinary/EndAppointment"
)

// VeterinaryClient is the client API for Veterinary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VeterinaryClient interface {
	MakeAppointment(ctx context.Context, in *MakeAppointmentRequest, opts ...grpc.CallOption) (*MakeAppointmentResponse, error)
	EndAppointment(ctx context.Context, in *EndAppointmentRequest, opts ...grpc.CallOption) (*EndAppointmentResponse, error)
}

type veterinaryClient struct {
	cc grpc.ClientConnInterface
}

func NewVeterinaryClient(cc grpc.ClientConnInterface) VeterinaryClient {
	return &veterinaryClient{cc}
}

func (c *veterinaryClient) MakeAppointment(ctx context.Context, in *MakeAppointmentRequest, opts ...grpc.CallOption) (*MakeAppointmentResponse, error) {
	out := new(MakeAppointmentResponse)
	err := c.cc.Invoke(ctx, Veterinary_MakeAppointment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *veterinaryClient) EndAppointment(ctx context.Context, in *EndAppointmentRequest, opts ...grpc.CallOption) (*EndAppointmentResponse, error) {
	out := new(EndAppointmentResponse)
	err := c.cc.Invoke(ctx, Veterinary_EndAppointment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VeterinaryServer is the server API for Veterinary service.
// All implementations must embed UnimplementedVeterinaryServer
// for forward compatibility
type VeterinaryServer interface {
	MakeAppointment(context.Context, *MakeAppointmentRequest) (*MakeAppointmentResponse, error)
	EndAppointment(context.Context, *EndAppointmentRequest) (*EndAppointmentResponse, error)
	mustEmbedUnimplementedVeterinaryServer()
}

// UnimplementedVeterinaryServer must be embedded to have forward compatible implementations.
type UnimplementedVeterinaryServer struct {
}

func (UnimplementedVeterinaryServer) MakeAppointment(context.Context, *MakeAppointmentRequest) (*MakeAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeAppointment not implemented")
}
func (UnimplementedVeterinaryServer) EndAppointment(context.Context, *EndAppointmentRequest) (*EndAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndAppointment not implemented")
}
func (UnimplementedVeterinaryServer) mustEmbedUnimplementedVeterinaryServer() {}

// UnsafeVeterinaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VeterinaryServer will
// result in compilation errors.
type UnsafeVeterinaryServer interface {
	mustEmbedUnimplementedVeterinaryServer()
}

func RegisterVeterinaryServer(s grpc.ServiceRegistrar, srv VeterinaryServer) {
	s.RegisterService(&Veterinary_ServiceDesc, srv)
}

func _Veterinary_MakeAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeterinaryServer).MakeAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Veterinary_MakeAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeterinaryServer).MakeAppointment(ctx, req.(*MakeAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Veterinary_EndAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeterinaryServer).EndAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Veterinary_EndAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeterinaryServer).EndAppointment(ctx, req.(*EndAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Veterinary_ServiceDesc is the grpc.ServiceDesc for Veterinary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Veterinary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Veterinary",
	HandlerType: (*VeterinaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeAppointment",
			Handler:    _Veterinary_MakeAppointment_Handler,
		},
		{
			MethodName: "EndAppointment",
			Handler:    _Veterinary_EndAppointment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Gateway/proto/veterinary.proto",
}
